@model SafeSurroundings.Models.PlacesViewModel

<h2 class="fieldNames">Edit Place</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PlaceModel.ID)
        @Html.HiddenFor(model => model.PlaceModel.Safety)

        <div class="form-group">
            @Html.Label("Name ", htmlAttributes: new { @class = "control-label col-md-2 fieldNames" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlaceModel.Name, new { htmlAttributes = new { @class = "form-control dropDown" } })
                @Html.ValidationMessageFor(model => model.PlaceModel.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Open Hour ", htmlAttributes: new { @class = "control-label col-md-2 fieldNames" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlaceModel.OpenHour, new { htmlAttributes = new { @class = "timepicker dropDown" } })
                @Html.ValidationMessageFor(model => model.PlaceModel.OpenHour, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Close Hour ", htmlAttributes: new { @class = "control-label col-md-2 fieldNames" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlaceModel.CloseHour, new { htmlAttributes = new { @class = "timepicker dropDown" } })
                @Html.ValidationMessageFor(model => model.PlaceModel.CloseHour, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("X-Coordinates ", htmlAttributes: new { @class = "control-label col-md-2 fieldNames" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlaceModel.X_Coordinates, new { htmlAttributes = new { @class = "form-control dropDown", type = "number" } })
                @Html.ValidationMessageFor(model => model.PlaceModel.X_Coordinates, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Y-Coordinates ", htmlAttributes: new { @class = "control-label col-md-2 fieldNames" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlaceModel.Y_Coordinates, new { htmlAttributes = new { @class = "form-control dropDown", type = "number" } })
                @Html.ValidationMessageFor(model => model.PlaceModel.Y_Coordinates, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group hidden">
            @Html.Label("SafetyType", htmlAttributes: new { @class = "control-label col-md-2 fieldNames" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Safety, new SelectList(Model.AvailableSafety), htmlAttributes: new { @class = "dropDown", @id = "ddlSafetyType" })
            </div>
        </div>


        <div class="form-group">
            @Html.Label("Safety Rating ", htmlAttributes: new { @class = "control-label col-md-2 fieldNames" })
            <div class="col-sm-3 dropDown" style="margin-left:5px">
                @for (int i = 0; i < 5; i++)
                {
                    if ((Model.PlaceModel != null) && (Model.PlaceModel.Safety != null) && (Model.PlaceModel.Safety.Count > 0) && (i < Math.Floor(Model.PlaceModel.Safety.Average(r => r))))
                    {
                        <span class="glyphicon glyphicon-star" id=@(Convert.ToInt16(i)+1)></span>
                    }
                    else
                    {
                        <span class="glyphicon glyphicon-star-empty" id=@(Convert.ToInt16(i)+1)></span>
                    }
                }
            </div>
        </div>

    </div>

    <div class="form-group">
        <div class="btn-group btn-group-lg" role="button">
            <input type="button" class="btn btn-info" value="Back to Meetups" onclick="location.href='@Url.Action("Index","Places")'" />
            <input type="submit" value="Update" class="btn btn-success" />
        </div>
    </div>
}
@section scripts{
    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
    <script src="~/Scripts/Ratings.js"></script>
    <script>
        $(document).ready(TimePicker());

        var date = new Date();
        var today = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 1);

        function TimePicker() {
            $(".timepicker").datetimepicker(
                {
                    format: "hh:mm A",
                    stepping: 30,
                }
            );
        };

    </script>
}
